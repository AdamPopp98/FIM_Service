import net from "net";
import crypto from 'crypto';
import CryptoJS from 'crypto-js';
import * as funcs from './netcoms.js';
import { Socket } from "dgram";

var CLIENTADDRESS = '142.251.40.110'; //Google's IP address verify response using wireshark
var HOST = '127.0.0.1';
var PORT = 8080;


//This is the shared secret between the server and the client.
var hashBuffer = crypto.createHash('sha256')
    .update('This is my secret hash value, please dont tell it to anyone.')
    .digest();

//Initializes a new client every 300ms until 1000 clients have been created to test server throughput. 
const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));
for (let i = 0; i < 1000; i++)
{
    await sleep(300);
    initializeClient();
}

export function initializeClient()
{
    let client = new net.Socket();
    console.log(client.localAddress);
    client.connect(PORT, HOST, function()
    {
        client.write(assemblePlaintext("www.umbc.edu", "Jlennon"));
    });
    client.on('data', function(data)
    {
        let json = JSON.parse(data);
        console.log(json);
        client.destroy();
    });
    return client;
}

export function assemblePlaintext(domainName, username)
{
	//challenge is generated by xoring the sharedSecret witht the cryptKey.
    var jsonObject = {"domain" : domainName, "username" : username};
    return JSON.stringify(jsonObject);
}
